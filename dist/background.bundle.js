(()=>{"use strict";async function e(e,t,...o){await chrome.scripting.executeScript({target:{tabId:e},func:t,args:o}),console.log("Script done")}async function t(e){console.log("Entered textareavalue script");const t=document.getElementById("prompt-textarea");if(console.log(t),t){t.value=e,t.dispatchEvent(new Event("input",{bubbles:!0}));const o=new KeyboardEvent("keydown",{key:"Enter",code:"Enter",which:13,keyCode:13,bubbles:!0,cancelable:!0});t.dispatchEvent(o)}else console.log("TextArea not found!")}async function o(e){console.log("Entered Last message script");const t=document.querySelector('[data-testid^="conversation-turn-"]:last-child');if(t){const e=t.querySelector(".text-message div.markdown.prose").textContent.trim();console.log(e)}else console.error("Last message element not found.")}let n,s,c=null,a=!1;chrome.runtime.onMessage.addListener((async(i,r,l)=>{if("openJobTab"===i.type)chrome.storage.local.get("url",(async({url:e})=>{console.log("Opening tab",e),await async function(e){const t=await async function(){return new Promise((e=>{chrome.tabs.query({active:!0,currentWindow:!0},(t=>{e(t)}))}))}();try{const o=await chrome.tabs.create({url:e});await chrome.tabs.update(o.id,{active:!0}),t&&await chrome.tabs.remove(t[0].id),chrome.runtime.sendMessage({type:"tabLoaded"})}catch(e){console.error("Error at openJobTab:",e)}}(e)}));else if("closeTab"===i.type)chrome.tabs.remove(r.tab.id);else if("openChatGPT"===i.type){console.log("Running background openChatGPT function");const n="https://chat.openai.com/",s=await chrome.tabs.create({url:n});await new Promise((e=>setTimeout(e,7e3))),await e(s.id,t,i.query),await new Promise((e=>setTimeout(e,5e3))),await e(s.id,o,i.query)}else if("openIndeedJob"===i.type)console.log("message.type == openIndeedJob"),chrome.tabs.query({active:!0,currentWindow:!0},(e=>{if(e.length>0){const t=e[0].id;chrome.scripting.executeScript({target:{tabId:t},files:["./applyScript.bundle.js"]})}else console.error("No active tab found")})),n=r.tab.id;else if("injectScript"==i.type)console.log("Received injectScript message"),console.log("Sender vs stored appliedTab",r.tab.id,s),s=r.tab.id;else{if("applied"==i.type)return console.log("Applied job, closing job tab now"),c=null,chrome.tabs.remove(r.tab.id),chrome.tabs.sendMessage(n,{type:"injectedScriptFinished"}),l({success:!0}),!0;if("storeQuestion"===i.type){const{question:e,answerType:t,options:o}=i;chrome.storage.sync.get("questions",(n=>{const s=n.questions||[];if(s.find((t=>t.question===e)))console.log(`Question "${e}" already exists in Chrome Storage, skipping.`);else{const n={question:e,answerType:t,options:o};s.push(n),chrome.storage.sync.set({questions:s},(()=>{console.log(`Question "${e}" stored in Chrome Storage.`)}))}}))}else"nextPageClicked"===i.type&&(console.log("Next page clicked message received"),a=!0)}})),chrome.tabs.onUpdated.addListener(((e,t,o)=>{"complete"===t.status&&e===s?(console.log("Page navigation detected in applied tab, injecting injectScript.bundle.js"),null===c&&(c=s,chrome.scripting.executeScript({target:{tabId:s},files:["./injectScript.bundle.js"]}))):"complete"===t.status&&a&&(console.log("Next page onUpdate running now"),a=!1,console.log("Trying to inject content script again after next page"),chrome.tabs.query({active:!0,currentWindow:!0},(function(e){chrome.tabs.sendMessage(e[0].id,{action:"startExecution"},(function(e){console.log("Sending message")}))})))}))})();